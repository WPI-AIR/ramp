<<<<<<< HEAD
population_size: 15
=======
# RAMP misc parameters #
population_size: 10
>>>>>>> devel

sub_populations: true 

modifications: true

evaluations: true

seed_population: false

error_reduction: true

# If true, planning and control cycles are cut off
only_sensing: false

# If false, control cycles are cut off
moving_robot: false

preplanning_cycles: 750

stop_after_ppcs: true

gens_before_control_cycle: 200

sensing_before_control_cycle: true

pop_traj_type: 1 #0=holonomic, 1=hybrid


# Sensing parameters #

# Horizontal FOV
field_of_view_angle: 1.25

remove_outside_fov: true




# Evaluation weight parameters #

fixed_control_cycle_rate: 1.2

sensing_cycle_rate: 10

eval_weight_T: 1.75

# As D weight increases, overall contribution of D to the cost decreases
# This is because high values of D are good so we add 1/D to the fitness cost
eval_weight_D: 100

eval_weight_A: 0.01




# Robot configuration parameters #
global_frame: "map"

update_topic: "odom"

shrink_ranges: false

use_start_param: false

use_hilbert_map: true



# Experimental setup parameters #
#
# Turtlebot obstacle topics
#obstacle_odoms: ['/obstacle_1/odom', '/obstacle_2/odom', '/obstacle_3/odom']
#obstacle_vels: ['/obstacle_1/mobile_base/commands/velocity', '/obstacle_2/mobile_base/commands/velocity', '/obstacle_3/mobile_base/commands/velocity']
#obstacle_odoms: ['/obstacle_1/odom', '/obstacle_2/odom']
#obstacle_vels: ['/obstacle_1/mobile_base/commands/velocity']
#obstacle_delays: [0]

# Stage simulator obstacle topics
# No obstacles
#obstacle_odoms: []
#obstacle_vels: []
#obstacle_delays: []

#obstacle_odoms: ['/robot_1/odom', '/robot_2/odom']
#obstacle_vels: ['/robot_1/cmd_vel', '/robot_2/cmd_vel']
#obstacle_delays: [2, 0]


#gazebo_model_names: ['cardboard_box', 'cardboard_box_0']
#gazebo_model_names: []

